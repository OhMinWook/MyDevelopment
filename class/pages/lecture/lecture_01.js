// React 2강
// 왜 react를 사용하는가
// - 대표적인 front-end 도구
// - react, vue, angular.....
// - angular - 프레임워크(이 곳에서 주어지는 것을 주로 사용해야 한다)
// - react - 라이브러리(현재 많이 커져서 프레임워크로 보는 경향이 있다.)
// - npm(node package manager) trends - 사용 경향 확인하는 사이트
// - react - 웹 서비스 제작, react-native - 모바일 앱 서비스, react + eletron - pc앱(slack)
// - react Native - 크로스 플랫폼 - 안드로이드와 IOS에 둘다 올릴 수 있지만, 큰 사양을 요구하는 게임등은 제작하기 어렵다.
// - react - 페이스북, 인스타그램, 트위터, 넷플릭스 등등, 검색 시 레퍼런스도 잘 되어 있어서 찾아 쓰기 편하다.
// react의 핵심 component
// 컴포넌트
// - component란 UI 또는 기능을 부품화 해서 재사용 가능하게 하는 것(기존의 페이지 단위로 만들어서 사용하지 않는다)
// - 부품의 크기는 사람마다, 회사마다 내부에서 정해서 규정한다.
// - 원본만 바꿔주면 적용한 모든 곳에 같이 적용이 된다.
// - UI 재사용
// - function이 component역할을 만들게 된다.
// - component 만드는 방법
// - 1. 클래스형 컴포넌트
//      이미 회사에서 기존에 클래스형 컴포넌트를 사용했다면 클래스형 컴포넌트를 사용해야 한다.
// - 2. 함수형 컴포넌트(최근에 많이 사용이 되고 있다.)
//      화살표 함수로 표현 가능
//      클래스형 컴포넌트를 함수형 컴포넌트로 변경할 수 있다.
//      한 프로젝트에서 클래스와 함수형 컴포넌트를 병행해서 사용할 수 있다.
// 함수형 컴포넌트 탄생 계기
// - React Hooks의 함수형 컴포넌트
// - Hooks는 함수형을 클래스형과 동일하게 기능을 사용 가능하도록 만들어 줌.
// - 데이터 보존 능력이 추가됨.(원래 클래스형 컴포넌트에 있던 기능)


// state 
// - 컴포넌트의 변수(let, const와 같은 기능)
// - const [ state(변수이름), setSta te(변수를 바꾸는 기능) ] = useState(초깃값)
// - import { useState } from 'react' -> 리액트로부터 import를 받는다.
// - state도 변수이므로 바뀔 수가 있다.
// - const [ age, setAge ] = useState(8) === let age = 8
// - setAge(13) === age = 13 -> 나이 8을 13으로 변경이 가능하다.
