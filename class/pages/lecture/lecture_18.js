// 로그인 수업
// 예전 방식 - 로그인 세션 방식

// 사용자가 많아져 메모리 용량, CPU을 늘려가면서 하는 방법
// 스케일 업

// 똑같은 백엔드를 복사, 붙여넣기 한 상황
// 하지만 트랙픽(사용자 접속량)에서 문제가 발생함

// stateful한 상태를 stateless(똑같은 거 복사 붙이기한 후 yarn dev)한 상태롤 만들어준다.
// 이렇게 하면 여러 명이 트래픽을 받을 수 있게 된다.
// 그러자 데이터 베이스에 몰리게 되면서 데이터 베이스에서 병목 현상이 발생하게 된다.

// 병목으로 몰린 데이터를 어떻게 분리할 지 고민하게 되었다.
// 수직파티셔닝, 수평파티셔닝으로 분리를 하게 된다.
// 수평 파티션닝으로 데이터 베이스를 분리하는 개념인 샤닝이 생긴다.

// 하나씩 각각의 데이터 베이스를 돌아가면 저장하는 방법 : roundrobin
// 각각의 데이터베이스 옆에 Redis를 두어 관리하는 방법을 최근 가장 많이 사용하는 방식이다.

// 토큰이란 사용자가 아이디와 패스워드로 접속을 하게 되면 데이터 베이스에서 토큰을 생성해 사용자에게 다시 돌려주면서 로그인이 이루어지게 된다.
// state에 받은 토큰을 저장한다. 그러게 되면서 로그인이 완료된다.
// 받은 토큰을 백엔드에 넘길때 토큰도 함께 넘겨주어야 한다. 넘겨진 토큰으로 데이터베이스에서 사용자가 로그인 한 상태인지 아닌지 확인한다.

// JWT(JSON WEB TOKEN) 토큰이 나옴으로써
// 데이터 베이스를 긁지 않고 정보를 암호화, 복호화를 함으로써 데이터베이스에 들르지 않고 정보를 알 수 있다.

// 아이디와 패스워드를 입력하면 백엔드에서 JWT를 주고 이를 state에 저장하고 이 저장한 토큰으로 백엔드에 넘겨주면(createProduct) 데이터베이스에서
// 저장된 정보를 긁지 않고 백엔드 자체에서 암호화된 토큰을 복호화하여 로그인 된 상태인지 허가여부 등을 판단하여 product 테이블(데이터베이스)에 등록하게 된다.

// JWT 만료시간을 30분에서 2시간으로 타이트하게 유지하게 한다. 그래서 자동연장을 하거나 재로그인을 해주어야 한다.
// 최초 JWT 관련 기록을 1회는 데이터 베이스에 저장하고 그 다음에 JWT는 마음대로 돌아다니다가 2시간정도 흐르면 만료가 되어
// 자동연장이 필요할 때가 되면 데이터 베이스에서 재발급 받을 때만 긁어 온다.(최초 1회나, 재발급할 때만 데이터베이스에 접근 한다.)

// JWT를 사용하여 관리를 할지 Redis로 관리 할지 두 가지 중 하나를 선택하여 로그인을 운영하게 된다.

// JMT 토큰(accessToken)

// 해싱(뭉게뜨린다.)
// 암호화
// 양방향 암호화 : 1234 -> abcd
// 단방향 암호화 : 1234 -> 12를 2로 치환, 34를 4로 치환해 24를 비밀번호로 저장한다. 문자 또한 숫자롤 치환해 저장한다. 복호화가 어렵다.
// 이를 패스워드 hash 한다고 한다.
